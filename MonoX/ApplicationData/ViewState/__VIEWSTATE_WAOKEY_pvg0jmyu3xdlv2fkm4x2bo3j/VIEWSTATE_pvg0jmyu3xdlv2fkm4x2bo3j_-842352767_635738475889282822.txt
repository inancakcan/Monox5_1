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Cw0KDQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhpZ2hsaXRlZCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoaWdobGl0ZWQtaW1hZ2UgaGwtc29jaWFsIj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhpZ2hsaXRlZC10ZXh0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDI+U29jaWFsIE5ldHdvcmtpbmc8L2gyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPk1vbm9YIGNvbWVzIHdpdGggZXZlcnl0aGluZyB5b3UgbmVlZCB0byBidWlsZCBhZHZhbmNlZCBzb2NpYWwgbmV0d29ya3MuPC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhICBocmVmPSIvTW9ub1gvUGFnZXMvRmVhdHVyZXMuYXNweD90YWI9dGFiLTMiPkZpbmQgb3V0IG1vcmU8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhpZ2hsaXRlZCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoaWdobGl0ZWQtaW1hZ2UgaGwtY29udGVudCI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoaWdobGl0ZWQtdGV4dCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyPkNvbnRlbnQgTWFuYWdlbWVudDwvaDI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+TW9ub1ggaW5jbHVkZXMgdmVyeSBwb3dlcmZ1bCBjb250ZW50IG1hbmFnZW1lbnQgZnVuY3Rpb25hbGl0eS48L3A+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSAgaHJlZj0iL01vbm9YL1BhZ2VzL0ZlYXR1cmVzLmFzcHg/dGFiPXRhYi0yIj5G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aWsuV2ViLlVJLkVkaXRvclRvb2xHcm91cCwgVGVsZXJpay5XZWIuVUksIFZlcnNpb249MjAxMi4zLjEwMTYuNDAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49MTIxZmFlNzgxNjViYTNkNGQWAgIBD2QWAmYPFCsAAw8WBB8MaB8NaGRkZGQCBQ8WAh8BBYIbDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlZC1ib3giPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9Nb25vWC9Nb2JpbGUvRGVmYXVsdC5hc3B4Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tbW9iaWxlIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMz5Nb25vWCBNb2JpbGU8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5Zb3UgY2FuIGdvIGZvciBhIHJlc3BvbnNpdmUgZGVzaWduLCBvciBidWlsZCBhIHNlcGFyYXRlIG1vYmlsZSB2ZXJzaW9uIG9mIHlvdXIgc2l0ZS48L3A+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlZC1ib3giPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9Nb25vWC9QYWdlcy9OZXdzLmFzcHgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1uZXdzIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMz5OZXdzPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+UXVpY2tseSBhbmQgZWFzaWx5IHByZXNlbnQgbmV3cyBhbmQgdXBkYXRlcyB0byB5b3VyIGF1ZGllbmNlLjwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmVkLWJveCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL01vbm9YL1BhZ2VzL1NvY2lhbE5ldHdvcmtpbmcvRXZlbnRDYWxlbmRhci5hc3B4Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tY2FsZW5kYXIiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzPkNhbGVuZGFyPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+RGlzcGxheSBhbmQgb3JnYW5pemUgYWxsIGtpbmRzIG9mIGV2ZW50cyB1c2luZyBhbiBpbnR1aXRpdmUgaW50ZXJmYWNlLjwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmVkLWJveCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL01vbm9YL1BhZ2VzL1NvY2lhbE5ldHdvcmtpbmcvRGFzaGJvYXJkLmFzcHgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1zb2NpYWwiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzPlNvY2lhbCBEYXNoYm9hcmQ8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5TaG93IHRoZSBtb3N0IGltcG9ydGFudCBzb2NpYWwgbmV0d29ya2luZyBmZWF0dXJlcyBpbiBvbmUgcGxhY2UuPC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZWQtYm94Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvYmxvZy9wb3N0cy9Nb25vWC8iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1ibG9nIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMz5CbG9nczwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkluc3RhbGwgYSBtdWx0aS11c2VyIGJsb2cgc3lzdGVtIHdpdGggYW50aS1zcGFtIHByb3RlY3Rpb24gYW5kIHN1cHBvcnQgZm9yIGN1c3RvbWl6YXRpb24uPC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZWQtYm94Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvTW9ub1gvUGFnZXMvU29jaWFsTmV0d29ya2luZy9EaXNjdXNzaW9uLmFzcHgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1ib2FyZCI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+RGlzY3Vzc2lvbiBCb2FyZHM8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5FbmdhZ2UgaW4gY29udmVyc2F0aW9uIHdpdGggZnVsbCBzdXBwb3J0IGZvciBjb21tZW50aW5nLCB2b3RpbmcgYW5kIG1vZGVyYXRpb24uPC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZWQtYm94Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvTW9ub1gvUGFnZXMvU29jaWFsTmV0d29ya2luZy9QaG90b0dhbGxlcnkuYXNweCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWdhbGxlcnkiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzPk1lZGlhIGdhbGxlcmllczwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkhvc3QgYW5kIHNoYXJlIHZpZGVvcywgcGhvdG9zLCByZXN1bWVzLCBvciBhbnkgb3RoZXIga2luZCBvZiBiaW5hcnkgYXR0YWNobWVudHMuPC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZWQtYm94Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvTW9ub1gvUGFnZXMvU29jaWFsTmV0d29ya2luZy9Hcm91cHMuYXNweCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWdyb3VwcyI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+R3JvdXBzPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+QWxsb3cgdXNlcnMgdG8gaW50ZXJhY3Qgd2l0aCBlYWNoIG90aGVyIGFyb3VuZCBjb21tb24gdG9waWNzLjwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICBkAgcPDxYCHwEFBEVkaXRkZAIJDw8WAh8GaBYCHw4FDWRpc3BsYXk6bm9uZTsWAgIBDw8WBB8BBQRTYXZlHwZoZGQCCw8PFgIfBmhkFgICAg9kFgJmD2QWAmYPZBYCAgEPZBYCAgUPFCsAA2RkZGQCAw8PFgYeDEdyb3VwaW5nVGV4dGUeB1Rvb2xUaXBlHwZoZBYCAgEPFgIeCW9ubW91c2V1cGUWAmYPZBYEZg9kFhICAQ8WAh8BBS5DaGFuZ2UgdGhlIGxvb2sgYW5kIGZ1bmN0aW9uYWxpdHkgb2YgdGhpcyBwYWdlZAIDDxYCHwZoZAIFDw8WBB4LTmF2aWdhdGVVcmwFGn4vTW9ub1gvQWRtaW4vRGVmYXVsdC5hc3B4HwZoZBYCZg8WAh8BBSRHbyB0byB0aGUgcG9ydGFsIGFkbWluaXN0cmF0aW9uIGFyZWFkAgcPDxYCHgxGb3JtYXRTdHJpbmcFGVlvdSBhcmUgbG9nZ2VkIGluIGFzOiB7MH1kZAIJDw8WAh4KTG9nb3V0VGV4dAUHTG9nIG91dGRkAgsPFgIfBmhkAg0PDxYEHxIFJ2h0dHA6Ly9sb2NhbGhvc3Q6MzA2NC8/bW9ub3hyZWxvYWQ9dHJ1ZR8GaGRkAg8PZBYCZg8PFgIfEAURTW9ub1ggVXNlciBNYW51YWxkZAIRDxYCHwEFL01vbm9YIHY1LjEuNDAuNTE1MiBbNy8zMC8yMDE1XSwgREIgdjUuMS40MC41MDI3ZAIBD2QWAgIBDw8WBB4NQWx0ZXJuYXRlVGV4dAUbVG9nZ2xlIGFkbWluaXN0cmF0aXZlIHBhbmVsHxAFG1RvZ2dsZSBhZG1pbmlzdHJhdGl2ZSBwYW5lbGRkAgUPFgIfDmUWAgIBDw8WCh8PZR8QZR4IQ3NzQ2xhc3MFCHRvcFBhbmVsHgRfIVNCAgIfBmhkFgQCAQ8UKwACFCsAAmQQFgVmAgECAgIDAgQWBRQrAAIPFgIfAQUKUGFnZSB0YXNrcxYCHgJJRAUQdGFiUGFnZVRhc2tzUGFuZWQUKwACDxYCHwEFE1dlYiBwYXJ0IHByb3BlcnRpZXMWAh8YBQ10YWJFZGl0b3JQYW5lZBQrAAIPFgIfAQUQV2ViIHBhcnQgY2F0YWxvZxYCHxgFDnRhYkNhdGFsb2dQYW5lZBQrAAIPFgIfAQUUV2ViIHBhcnQgY29ubmVjdGlvbnMWAh8YBRJ0YWJDb25uZWN0aW9uc1BhbmVkFCsAAg8WAh8BBQtFZGl0IHNvdXJjZRYCHxgFD3RhYkNvbnRyb2xzUGFuZWQPFgVmZmZmZhYBBW9UZWxlcmlrLldlYi5VSS5SYWRUYWIsIFRlbGVyaWsuV2ViLlVJLCBWZXJzaW9uPTIwMTIuMy4xMDE2LjQwLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPTEyMWZhZTc4MTY1YmEzZDRkFgpmDw8WAh8BBQpQYWdlIHRhc2tzFgIfGAUQdGFiUGFnZVRhc2tzUGFuZWQCAQ8PFgIfAQUTV2ViIHBhcnQgcHJvcGVydGllcxYCHxgFDXRhYkVkaXRvclBhbmVkAgIPDxYCHwEFEFdlYiBwYXJ0IGNhdGFsb2cWAh8YBQ50YWJDYXRhbG9nUGFuZWQCAw8PFgIfAQUUV2ViIHBhcnQgY29ubmVjdGlvbnMWAh8YBRJ0YWJDb25uZWN0aW9uc1BhbmVkAgQPDxYCHwEFC0VkaXQgc291cmNlFgIfGAUPdGFiQ29udHJvbHNQYW5lZAIDDxQrAAJkFQURUGFnZVRhc2tzUGFuZVZpZXcORWRpdG9yUGFuZVZpZXcPQ2F0YWxvZ1BhbmVWaWV3E0Nvbm5lY3Rpb25zUGFuZVZpZXcQQ29udHJvbHNQYW5lVmlldxYKZg9kFgICAQ9kFgZmD2QWAmYPEA8WBh4NRGF0YVRleHRGaWVsZAUMTGFuZ3VhZ2VOYW1lHg5EYXRhVmFsdWVGaWVsZAULQ3VsdHVyZU5hbWUeC18hRGF0YUJvdW5kZ2QQFQoSQ3JvYXRpYW4gKENyb2F0aWEpFkN6ZWNoIChDemVjaCBSZXB1YmxpYykQRGFuaXNoIChEZW5tYXJrKRFFbmdsaXNoIChEZWZhdWx0KRBHZXJtYW4gKEdlcm1hbnkpE0h1bmdhcmlhbiAoSHVuZ2FyeSkPSXRhbGlhbiAoSXRhbHkpEVNsb3ZhayAoU2xvdmFraWEpD1NwYW5pc2ggKFNwYWluKRBUdXJraXNoIChUdXJrZXkpFQoFaHItSFIFY3MtQ1oFZGEtREsFZW4tVVMFZGUtREUFaHUtSFUFaXQtSVQFc2stU0sFZXMtRVMFdHItVFIUKwMKZ2dnZ2dnZ2dnZxYBAgNkAgMPDxYCHwZoZGQCBA8PFgIfBmhkZAIBD2QWAgIBDxQrAAQUKwAHPCsACQEADxYGHg1FbXB0eVpvbmVUZXh0BSRUaGVyZSBhcmUgbm8gYXZhaWxhYmxlIGVkaXRvciBwYXJ0cy4eCkhlYWRlclRleHQFEVByb3BlcnRpZXMgZWRpdG9yHg9JbnN0cnVjdGlvblRleHQFVE1vZGlmeSB0aGUgcHJvcGVydGllcyBvZiB0aGUgV2ViIFBhcnQsIHRoZW4gY2xpY2sgT0sgb3IgQXBwbHkgdG8gYXBwbHkgeW91ciBjaGFuZ2VzLmRkZBYCHwZoZGRkFgQeC0Rlc2NyaXB0aW9uBQ9BcHBsaWVzIGNoYW5nZXMfAQUFQXBwbHkWBB8fBQ9DYW5jZWxzIGNoYW5nZXMfAQUGQ2FuY2VsFgQfHwUhQXBwbGllcyBjaGFuZ2VzIGFuZCBjbG9zZXMgZWRpdG9yHwEFAk9LZAICD2QWAgIBDzwrAAUBABQrAAc8KwAJAQAPFggfHAUaV2ViIHBhcnQgY2F0YWxvZyBpcyBlbXB0eS4fHQUQV2ViIHBhcnQgY2F0YWxvZx8eBTVTZWxlY3QgdGhlIFdlYiBwYXJ0IGNhdGFsb2cgeW91IHdvdWxkIGxpa2UgdG8gYnJvd3NlLh4UU2VsZWN0VGFyZ2V0Wm9uZVRleHQFB0FkZCB0bzpkZGQWAh8GaGRkZGQCAw9kFgQCAQ8PFgIfAQWKAVBsZWFzZSBzZWxlY3QgV2ViIHBhcnRzIHRoYXQgYXJlIGNvbW11bmljYXRpb24gcHJvdmlkZXJzIG9yIGNvbnN1bWVycyBhbmQgY2hvb3NlICJDb25uZWN0IiBtZW51IHZlcmIgdG8gZGlzcGxheSBtb3JlIG9wdGlvbnMgaW4gdGhpcyBwYW5lLmRkAgMPPCsABgEAPCsABwEAPCsACQEADxYsHiBDb25uZWN0VG9Db25zdW1lckluc3RydWN0aW9uVGV4dAUuQ3JlYXRlIGNvbnN1bWVyIGNvbm5lY3Rpb25zIGZvciB0aGlzIFdlYiBQYXJ0Lh4KU2VuZFRvVGV4dAUDVG86HhBJbnN0cnVjdGlvblRpdGxlBR5NYW5hZ2UgdGhlIGNvbm5lY3Rpb25zIGZvciB7MH0eDkNvbnN1bWVyc1RpdGxlBQlDb25zdW1lcnMeFUNvbm5lY3RUb0NvbnN1bWVyVGV4dAUvQ2xpY2sgaGVyZSB0byBjcmVhdGUgYSBjb25uZWN0aW9uIHRvIGEgQ29uc3VtZXIeCFNlbmRUZXh0BQVTZW5kOh4VQ29ubmVjdFRvUHJvdmlkZXJUZXh0BS9DbGljayBoZXJlIHRvIGNyZWF0ZSBhIGNvbm5lY3Rpb24gdG8gYSBQcm92aWRlch4WQ29ubmVjdFRvQ29uc3VtZXJUaXRsZQUVU2VuZCBEYXRhIHRvIFdlYiBQYXJ0HgtHZXRGcm9tVGV4dAUFRnJvbToeI05vRXhpc3RpbmdDb25uZWN0aW9uSW5zdHJ1Y3Rpb25UZXh0BacBVGhlcmUgYXJlIG5vIGFjdGl2ZSBjb25uZWN0aW9ucyBhdmFpbGFibGUgaW4geW91ciBXZWIgUGFydC4gWW91IG1heSBjcmVhdGUgYSBuZXcgY29ubmVjdGlvbiBieSBzZWxlY3RpbmcgdGhlIGxpbmtzIGFib3ZlIGlmIHRoZXJlIGFyZSBjb21wYXRpYmxlIFdlYiBQYXJ0cyBvbiB0aGUgcGFnZS4eGENvbnN1bWVyc0luc3RydWN0aW9uVGV4dAU5V2ViIHBhcnRzIHRoYXQgdGhlIGN1cnJlbnQgV2ViIHBhcnQgc2VuZHMgaW5mb3JtYXRpb24gdG86Hx0FFFdlYiBwYXJ0IGNvbm5lY3Rpb25zHhhDb25maWd1cmVDb25uZWN0aW9uVGl0bGUFFENvbmZpZ3VyZSBDb25uZWN0aW9uHg5Qcm92aWRlcnNUaXRsZQUJUHJvdmlkZXJzHx4FME1hbmFnZSB0aGUgY29ubmVjdGlvbnMgZm9yIHRoZSBjdXJyZW50IFdlYiBwYXJ0Lh4YUHJvdmlkZXJzSW5zdHJ1Y3Rpb25UZXh0BTpXZWIgcGFydHMgdGhhdCB0aGUgY3VycmVudCBXZWIgcGFydCBnZXRzIGluZm9ybWF0aW9uIGZyb206HhlOb0V4aXN0aW5nQ29ubmVjdGlvblRpdGxlBRVObyBhY3RpdmUgY29ubmVjdGlvbnMeFkNvbm5lY3RUb1Byb3ZpZGVyVGl0bGUFFkdldCBEYXRhIGZyb20gV2ViIFBhcnQeHkV4aXN0aW5nQ29ubmVjdGlvbkVycm9yTWVzc2FnZQVZVGhpcyBjb25uZWN0aW9uIGlzIGN1cnJlbnRseSBpbmFjdGl2ZSBkdWUgdG8gdGhlIHVuYXZhaWxhYmlsaXR5IG9mIG9uZSBvZiBpdHMgZW5kIHBvaW50cy4eIENvbm5lY3RUb1Byb3ZpZGVySW5zdHJ1Y3Rpb25UZXh0BS5DcmVhdGUgcHJvdmlkZXIgY29ubmVjdGlvbnMgZm9yIHRoaXMgV2ViIFBhcnQuHhlOZXdDb25uZWN0aW9uRXJyb3JNZXNzYWdlBZECQ2FuJ3QgY29udGludWUgd2l0aCB0aGUgY3JlYXRpb24gb2YgdGhpcyBjb25uZWN0aW9uIGJlY2F1c2UgYXQgbGVhc3Qgb25lIG9mIHRoZSBXZWIgUGFydHMgb3IgY29ubmVjdGlvbiBwb2ludHMgaGFzIGRpc2FwcGVhcmVkIG9yIGhhcyBiZWNvbWUgaW5jb21wYXRpYmxlIHdpdGggdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBXZWIgUGFydCBvciBpcyBhbHJlYWR5IHVzZWQgYnkgYW5vdGhlciBjb25uZWN0aW9uIGFuZCBkb2Vzbid0IHN1cHBvcnQgbXVsdGlwbGUgY29ubmVjdGlvbnMuHgdHZXRUZXh0BQRHZXQ6ZGQCBA9kFgICAQ8WAh8BBYQBVGhpcyBpcyBhIGxpc3Qgb2YgYWxsIHBhcnRzIGFuZCBtYXN0ZXIgcGFnZXMgdGhhdCBhcmUgcmVuZGVyZWQgb24gdGhpcyBwYWdlLiBQbGVhc2UgY2xpY2sgb24gdGhlIHBhZ2Ugb3IgcGFydCB0aGF0IHlvdSB3YW50IHRvIGVkaXQuZAIHDxYCHgdFbmFibGVkaGQCCw9kFgoCAQ9kFgJmDw8WCB8WBQ9Nb25vWFNpbXBsZU1lbnUeCiFJdGVtQ291bnRmHxtnHxcCAmQWGAIDD2QWAmYPFQcPIGZpcnN0IHNlbGVjdGVkAARIb21lGDxhIGhyZWY9Ii9EZWZhdWx0LmFzcHgiPgRIb21lAABkAgQPZBYCZg8VAQBkAgYPZBYCZg8VBwAABUFib3V0JTxhIGhyZWY9Ii9Nb25vWC9QYWdlcy9GZWF0dXJlcy5hc3B4Ij4FQWJvdXQAAGQCBw9kFgJmDxUBAGQCCQ9kFgJmDxUHAAAEQmxvZx08YSBocmVmPSIvYmxvZy9wb3N0cy9Nb25vWC8iPgRCbG9nAABkAgoPZBYCZg8VAQBkAgwPZBYCZg8VBwAACkRpc2N1c3Npb244PGEgaHJlZj0iL01vbm9YL1BhZ2VzL1NvY2lhbE5ldHdvcmtpbmcvRGlzY3Vzc2lvbi5hc3B4Ij4KRGlzY3Vzc2lvbgAAZAIND2QWAmYPFQEAZAIPD2QWAmYPFQcAAAZQaG90b3M6PGEgaHJlZj0iL01vbm9YL1BhZ2VzL1NvY2lhbE5ldHdvcmtpbmcvUGhvdG9HYWxsZXJ5LmFzcHgiPgZQaG90b3MAAGQCEA9kFgJmDxUBAGQCEg9kFgJmDxUHBSBsYXN0AAZHcm91cHM0PGEgaHJlZj0iL01vbm9YL1BhZ2VzL1NvY2lhbE5ldHdvcmtpbmcvR3JvdXBzLmFzcHgiPgZHcm91cHMAAGQCEw9kFgJmDxUBAGQCAg9kFgYCAQ9kFgRmDw8WCB4NTG9nb3V0UGFnZVVybAUBLx4JTG9naW5UZXh0BQVMb2dpbh8UBQLCoB4ZUmVnaXN0ZXJBc1Bvc3RCYWNrQ29udHJvbGhkFgJmD2QWBGYPDxYKHhBDYXVzZXNWYWxpZGF0aW9uaB8QZR8WZB8XAgIfBmhkZAIBDw8WCB8SBRkvbG9naW4uYXNweD9SZXR1cm5Vcmw9JTJmHxBlHxZkHxcCAmRkAgEPDxYEHxIFGn4vTWVtYmVyc2hpcC9SZWdpc3Rlci5hc3B4HwEFCFJlZ2lzdGVyZGQCAw8WAh8GaBYGZg8PFgIfEgUCfi9kZAIBDw8WBB8SBSp+L01vbm9YL1BhZ2VzL1NvY2lhbE5ldHdvcmtpbmcvSW5NYWlsLmFzcHgfEAUUR28gdG8gbWVzc2FnZSBjZW50ZXJkZAIDDw8WBh83BQEvHzgFBUxvZ2luHxQFAsKgZBYCZg9kFgJmDw8WAh86aGRkAgUPFgIfBmgWAgIBDw8WAh8TBRlZb3UgYXJlIGxvZ2dlZCBpbiBhczogezB9ZGQCAw9kFgICAg9kFghmDw8WBh4JTWF4TGVuZ3RoAvQDHxYFJW1haW5TZWFyY2hCb3hJbnB1dEZpZWxkIGpxX3N3YXBfdmFsdWUfFwICZGQCAQ8PFggfAQUCR28fFgULc2VhcmNoSW1hZ2UeDU9uQ2xpZW50Q2xpY2sFrwFpZiAoJCgnI2N0bDAwX2N0bDAwX2N0bDAxX2N0bDAwX2NwX2NwX2NwX2N0bFNlYXJjaF90eHRTZWFyY2gnKS52YWwoKSA9PT0gJycgfHwgJCgnI2N0bDAwX2N0bDAwX2N0bDAxX2N0bDAwX2NwX2NwX2NwX2N0bFNlYXJjaF90eHRTZWFyY2gnKS52YWwoKSA9PT0gJ1NlYXJjaC4uLicgKSByZXR1cm4gZmFsc2U7HxcCAmRkAgIPDxYCHwZoZBYEZg9kFgJmDw8WAh88Ba8BaWYgKCQoJyNjdGwwMF9jdGwwMF9jdGwwMV9jdGwwMF9jcF9jcF9jcF9jdGxTZWFyY2hfdHh0U2VhcmNoJykudmFsKCkgPT09ICcnIHx8ICQoJyNjdGwwMF9jdGwwMF9jdGwwMV9jdGwwMF9jcF9jcF9jcF9jdGxTZWFyY2hfdHh0U2VhcmNoJykudmFsKCkgPT09ICdTZWFyY2guLi4nICkgcmV0dXJuIGZhbHNlO2RkAgIPZBYCZg8PFgIfPAWvAWlmICgkKCcjY3RsMDBfY3RsMDBfY3RsMDFfY3RsMDBfY3BfY3BfY3BfY3RsU2VhcmNoX3R4dFNlYXJjaCcpLnZhbCgpID09PSAnJyB8fCAkKCcjY3RsMDBfY3RsMDBfY3RsMDFfY3RsMDBfY3BfY3BfY3BfY3RsU2VhcmNoX3R4dFNlYXJjaCcpLnZhbCgpID09PSAnU2VhcmNoLi4uJyApIHJldHVybiBmYWxzZTtkZAIDDxYCHgtfIUl0ZW1Db3VudAIJFhJmD2QWBAIBDxYCHgV2YWx1ZWRkAgIPFQJHY3RsMDBfY3RsMDBfY3RsMDFfY3RsMDBfY3BfY3BfY3BfY3RsU2VhcmNoX3JwdEZpbHRlcnNfY3RsMDBfY2hrUHJvdmlkZXIDQWxsZAIBD2QWBAIBDxYCHz4FEkJsb2dTZWFyY2hQcm92aWRlcmQCAg8VAkdjdGwwMF9jdGwwMF9jdGwwMV9jdGwwMF9jcF9jcF9jcF9jdGxTZWFyY2hfcnB0RmlsdGVyc19jdGwwMV9jaGtQcm92aWRlcgVCbG9nc2QCAg9kFgQCAQ8WAh8+BRtDYWxlbmRhckV2ZW50U2VhcmNoUHJvdmlkZXJkAgIPFQJHY3RsMDBfY3RsMDBfY3RsMDFfY3RsMDBfY3BfY3BfY3BfY3RsU2VhcmNoX3JwdEZpbHRlcnNfY3RsMDJfY2hrUHJvdmlkZXIJQ2FsZW5kYXJzZAIDD2QWBAIBDxYCHz4FGERpc2N1c3Npb25TZWFyY2hQcm92aWRlcmQCAg8VAkdjdGwwMF9jdGwwMF9jdGwwMV9jdGwwMF9jcF9jcF9jcF9jdGxTZWFyY2hfcnB0RmlsdGVyc19jdGwwM19jaGtQcm92aWRlcgtEaXNjdXNzaW9uc2QCBA9kFgQCAQ8WAh8+BRNHcm91cFNlYXJjaFByb3ZpZGVyZAICDxUCR2N0bDAwX2N0bDAwX2N0bDAxX2N0bDAwX2NwX2NwX2NwX2N0bFNlYXJjaF9ycHRGaWx0ZXJzX2N0bDA0X2Noa1Byb3ZpZGVyBkdyb3Vwc2QCBQ9kFgQCAQ8WAh8+BRJOZXdzU2VhcmNoUHJvdmlkZXJkAgIPFQJHY3RsMDBfY3RsMDBfY3RsMDFfY3RsMDBfY3BfY3BfY3BfY3RsU2VhcmNoX3JwdEZpbHRlcnNfY3RsMDVfY2hrUHJvdmlkZXIETmV3c2QCBg9kFgQCAQ8WAh8+BRNQYWdlc1NlYXJjaFByb3ZpZGVyZAICDxUCR2N0bDAwX2N0bDAwX2N0bDAxX2N0bDAwX2NwX2NwX2NwX2N0bFNlYXJjaF9ycHRGaWx0ZXJzX2N0bDA2X2Noa1Byb3ZpZGVyBVBhZ2VzZAIHD2QWBAIBDxYCHz4FGlBob3RvR2FsbGVyeVNlYXJjaFByb3ZpZGVyZAICDxUCR2N0bDAwX2N0bDAwX2N0bDAxX2N0bDAwX2NwX2NwX2NwX2N0bFNlYXJjaF9ycHRGaWx0ZXJzX2N0bDA3X2Noa1Byb3ZpZGVyBlBob3Rvc2QCCA9kFgQCAQ8WAh8+BRlVc2VyUHJvZmlsZVNlYXJjaFByb3ZpZGVyZAICDxUCR2N0bDAwX2N0bDAwX2N0bDAxX2N0bDAwX2NwX2NwX2NwX2N0bFNlYXJjaF9ycHRGaWx0ZXJzX2N0bDA4X2Noa1Byb3ZpZGVyDVVzZXIgcHJvZmlsZXNkAgUPZBYEAgMPPCsAEgIAFCsACQ8WAh4HUGFkZGluZ2ZkZGQWBB4LQ2VsbFBhZGRpbmdmHxcCgIAIZGQWBB8WBRJXZWJQYXJ0SGlkZUVsZW1lbnQfFwICZGQFFgIfBmhkAgUPPCsAEgIAFCsACQ8WAh8/ZmRkZBYEH0BmHxcCgIAIZGQWBB8WBRJXZWJQYXJ0SGlkZUVsZW1lbnQfFwICZGQFFgIfBmhkAgcPZBYEAgEPDxYCHxMFGVlvdSBhcmUgbG9nZ2VkIGluIGFzOiB7MH1kZAICDw8WBh84BQVMb2dpbh8UBRhMb2cgb3V0IGJ5IGNsaWNraW5nIGhlcmUfOWhkFgJmD2QWBGYPDxYKHzpoHxBlHxZkHxcCAh8GaGRkAgEPDxYIHxIFGS9sb2dpbi5hc3B4P1JldHVyblVybD0lMmYfEGUfFmQfFwICZGQYAQUeX19Db250cm9sc1JlcXVpcmVQb3N0QmFja0tleV9fFgkFR2N0bDAwJGN0bDAwJGN0bDAxJGN0bDAwJGNwJGNwJGNwJGN0bFNlYXJjaCRycHRGaWx0ZXJzJGN0bDAwJGNoa1Byb3ZpZGVyBUdjdGwwMCRjdGwwMCRjdGwwMSRjdGwwMCRjcCRjcCRjcCRjdGxTZWFyY2gkcnB0RmlsdGVycyRjdGwwMSRjaGtQcm92aWRlcgVHY3RsMDAkY3RsMDAkY3RsMDEkY3RsMDAkY3AkY3AkY3AkY3RsU2VhcmNoJHJwdEZpbHRlcnMkY3RsMDIkY2hrUHJvdmlkZXIFR2N0bDAwJGN0bDAwJGN0bDAxJGN0bDAwJGNwJGNwJGNwJGN0bFNlYXJjaCRycHRGaWx0ZXJzJGN0bDAzJGNoa1Byb3ZpZGVyBUdjdGwwMCRjdGwwMCRjdGwwMSRjdGwwMCRjcCRjcCRjcCRjdGxTZWFyY2gkcnB0RmlsdGVycyRjdGwwNCRjaGtQcm92aWRlcgVHY3RsMDAkY3RsMDAkY3RsMDEkY3RsMDAkY3AkY3AkY3AkY3RsU2VhcmNoJHJwdEZpbHRlcnMkY3RsMDUkY2hrUHJvdmlkZXIFR2N0bDAwJGN0bDAwJGN0bDAxJGN0bDAwJGNwJGNwJGNwJGN0bFNlYXJjaCRycHRGaWx0ZXJzJGN0bDA2JGNoa1Byb3ZpZGVyBUdjdGwwMCRjdGwwMCRjdGwwMSRjdGwwMCRjcCRjcCRjcCRjdGxTZWFyY2gkcnB0RmlsdGVycyRjdGwwNyRjaGtQcm92aWRlcgVHY3RsMDAkY3RsMDAkY3RsMDEkY3RsMDAkY3AkY3AkY3AkY3RsU2VhcmNoJHJwdEZpbHRlcnMkY3RsMDgkY2hrUHJvdmlkZXJiJ9imBxXL5pryt2BtTZ+ViH07ig==